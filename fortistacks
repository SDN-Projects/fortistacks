#!/bin/bash
# #######
# Copyright (c) 2016 Fortinet All rights reserved
# Author: Nicolas Thomas nthomas_at_fortinet.com
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
#    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    * See the License for the specific language governing permissions and
#    * limitations under the License.


export LC_ALL=C

## avoid warnings about utf-8 for macusers



control_c()
{
    # run if user hits control-c
    echo -en "\n*** Ouch! Exiting ***\n"
    # can put some cleaning here
    exit $?
}
 
# trap keyboard interrupt (control-c)
trap control_c SIGINT

usage()
{
cat << EOF
    
fortistacks - This script setup your Ubuntu host to be fully ready for fortistack
              For those not willing to use docker. Using jumphost for example

USAGE: install sudoers desktop

  The options  must be passed as follows:
  -h , --help
  -d , --debug		optionnal debug mode 
 Note: some actions requires root privileges

 Multiples actions can be provided as explained here.
 sudoers - setup sudo passwordless
 desktop - setup ubuntu-desktop
 screenshare - access for old clients (macos, windows)
 install - installed the system requirements to be compatible with fortistacks demos/examples

EOF
exit 0
}

screenshare()
{
 #    auto login and enable non-encrypted vnc access password fortinet


 ##
    cat << EOF | sudo tee /etc/gdm3/custom.conf
# GDM configuration storage
[daemon]
# Uncoment the line below to force the login screen to use Xorg
WaylandEnable=true

# Enabling automatic login
AutomaticLoginEnable = true
AutomaticLogin = $USER

[security]

[xdmcp]

[greeter]
# Only include selected logins in the greeter
# IncludeAll = false
# Include = user1,user2

[chooser]

[debug]
# Uncomment the line below to turn on debugging
# More verbose logs
# Additionally lets the X server dump core if it crashes
#Enable=true
EOF

     sudo systemctl restart gdm3.service
     sleep 12
     export DISPLAY=:0
     # require netplan to have renderer NEtworkManager
     gsettings set  org.gnome.Vino enabled true
      #   for broken clients like rdp/Macos
     gsettings set  org.gnome.Vino  require-encryption false
     gsettings set  org.gnome.Vino vnc-password Zm9ydGluZXQ=
     gsettings set org.gnome.Vino use-upnp true
     gsettings set org.gnome.Vino notify-on-connect false
     gsettings set org.gnome.Vino prompt-enabled false
     gsettings set org.gnome.Vino authentication-methods  "['vnc']"
     sudo systemctl restart gdm3.service

}

desktop()
{
     #    auto login
     sudo apt-get -y install ubuntu-desktop
     # Must replace renderer once desktop is installed in netplan for vino to be happy
    sudo sed -i 's/renderer: networkd/renderer: NetworkManager/' /etc/netplan/60-ens4.yaml
    sudo netplan apply
}


sudoers()
{
   #  Go passwordless for sudo this is a dev fortistacks DO NOT DO in Prod
    sudo adduser $USER -G adm,sudo
    echo "$USER ALL=(ALL) NOPASSWD:ALL" |  sudo tee /etc/sudoers.d/99-nopasswd
}

install-packages()
{
    # install all the package/ppa sudo kernel setup .
    sudo apt update  || sudo apt upgrade
    DEBIAN_FRONTEND=noninteractive
    sudo apt-get -y install git python-pip wget zile byobu bash sudo python-virtualenv wget git cloud-image-utils \
           python-openstackclient sudo python-heatclient software-properties-common apt-transport-https \
           bash-completion software-properties-common vim bash-completion
    sudo apt-get clean
    [ -f $HOME/.ssh/id_rsa ] ||  ssh-keygen  -t rsa -b 4096 -C "autogenerated key"  -q -P "" -f "$HOME/.ssh/id_rsa"
   
}

install()
{
    install-packages
    echo "You are all set it is highly recommended to restart now"
}


OPTS=$(getopt -o hdp: --long help,debug,partition: \
-n 'fortistacks' -- "$@")




if [ $? != 0 ] ; then echo "Terminating..." >&2 ; exit 1 ; fi

# Note the quotes around `$OPTS': they are essential!
eval set -- "$OPTS"
MAIN=1
while true ; do
        case "$1" in
            -h|--help) usage ; exit 0 ;;
	          -d|--debug) set -x; shift ;;
	          # code to collect multiple actions in a row if we want
            --) shift ;  ACTIONS=$@; shift ;;
            *) echo "$# param left"; [ $# ] || shift && break ;;
	    # purge the list (shift)/break if zero
        esac
done

## the different actions passed as parameters are called as functions.
eval set -- "$ACTIONS"
while [ "$#" != 0 ] ; do
    $1 ; shift
done
