#!/bin/bash
# #######
# Copyright (c) 2016 Fortinet All rights reserved
# Author: Nicolas Thomas nthomas_at_fortinet.com
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
#    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    * See the License for the specific language governing permissions and
#    * limitations under the License.


export LC_ALL=C

## avoid warnings about utf-8 for macusers


is-root()
{
    if [ "$(id -u)" == "0" ]; then
	echo "This script is to be run by your normal user using sudo for root"
	exit 77
    fi
}

control_c()
{
    # run if user hits control-c
    echo -en "\n*** Ouch! Exiting ***\n"
    # can put some cleaning here
    exit $?
}
 
# trap keyboard interrupt (control-c)
trap control_c SIGINT

usage()
{
cat << EOF
    
fortistacks - This script aims to setup you host to be fully ready for fortidemos usage LXD/Docker perso lab

USAGE: -p /dev/sdaX install sudoers desktop

  The options  must be passed as follows:
  -p , --partition /dev/sdaX   - mandatory free to use partition 
  -h , --help
  -d , --debug		optionnal debug mode 
 Note: some actions requires root privileges

 Multiples actions can be provided as explained here.
 sudoers - setup sudo passwordless
 desktop - setup ubuntu-desktop and vnc access for old clients (macos, windows)
 install - does a complete bleach and reinstall of lxd, packages etc.

EOF
exit 0
}

desktop()
{
 #    auto login
     cat << EOF | sudo tee /etc/lightdm/lightdm.conf.d/50-autolog.conf
[SeatDefaults]
autologin-user=$USER
EOF
     sudo systemctl restart lightdm.service
     sleep 12
     export DISPLAY=:0
     gsettings set  org.gnome.Vino enabled true
      #   for broken clients like rdp/Macos
     gsettings set  org.gnome.Vino  require-encryption false
     gsettings set  org.gnome.Vino vnc-password Zm9ydGluZXQ=
     gsettings set org.gnome.Vino use-upnp true
     gsettings set org.gnome.Vino notify-on-connect false
     gsettings set org.gnome.Vino prompt-enabled false
     gsettings set org.gnome.Vino authentication-methods  "['vnc']"
     sudo systemctl restart lightdm.service

}

bleach-lxd()
{
    for L in `lxc list | awk '{print $2}' | grep -v NAME`; do lxc delete $L --force ; done
    for I in `lxc image list | awk '{print $4}' | grep -v FINGERPRINT`; do lxc image delete $I ; done
    sudo zpool destroy lxd  || echo "looks like lxd was not using zfs before"
    rm -rf ~/.local/share/juju/
}

lxd-init()
{

    [ ${#PARTITION} == 0 ] || (echo "a Partition parameter is mandatory";exit 2)
    (sudo fdisk -l | grep $PARTITION )|| (echo "$PARTITION does not appaer in partition table";exit 2)
    sudo sed -i 's|^GRUB_CMDLINE_LINUX=.*|GRUB_CMDLINE_LINUX="cgroup_enable=memory swapaccount=1"|' /etc/default/grub
    sudo update-grub
    # assume lxd as not been setup correctly    
    sudo debconf-set-selections <<< "lxd lxd/bridge-empty-error boolean true"
    sudo debconf-set-selections <<< "lxd lxd/bridge-name string lxdbr0"
    sudo debconf-set-selections <<< "lxd lxd/bridge-ipv6 string false"
    sudo debconf-set-selections <<< "lxd lxd/bridge-ipv4 string true"
    sudo debconf-set-selections <<< "lxd lxd/bridge-ipv4-nat string true"
    sudo debconf-set-selections <<< "lxd lxd/bridge-ipv4-dhcp-first string 10.10.10.10"
    sudo debconf-set-selections <<< "lxd lxd/bridge-ipv4-address string 10.10.10.1"
    sudo debconf-set-selections <<< "lxd lxd/bridge-ipv4-dhcp-last string 10.10.11.253"
    sudo debconf-set-selections <<< "lxd lxd/bridge-ipv4-netmask string 21"
    sudo debconf-set-selections <<< "lxd lxd/setup-bridge string true"
    sudo debconf-set-selections <<< "lxd lxd/bridge-ipv4-dhcp-leases string 510"
    sudo cp lxd-bridge /etc/default/
    sudo zpool destroy lxd || (echo "Can not destroy the lxd pratition run action with this script bleach-lxd";exit 2)
    sudo zpool create lxd $PARTITION
    sudo lxd init --auto   --storage-backend=zfs --storage-pool=lxd || exit 2
     # weird way to trigger the reconfigure script reconfigure does not work..
    sudo apt --reinstall install lxd || sudo dpkg --configure -a || exit 2
    ( lxc profile device list default| grep eth1 ) && sudo lxc profile device remove default eth1
    sudo lxc profile device add default eth1 nic nictype=bridged parent=lxdbr0
    #  lxc profile device set default eth0 mtu 9000  || exit 2
    #  sudo lxc network set lxdbr0 bridge.mtu 9000  || exit 2
    sudo lxc profile device add default kvm unix-char path=/dev/kvm  || (echo "you must enable vt-x on your machine for this to work" ; exit 2)
    sudo lxc profile set default security.privileged true
    sudo lxc profile set default linux.kernel_modules openvswitch,nbd,ip_tables,ip6_tables,netlink_diag
    # should be : sudo dpkg-reconfigure -p high lxd
}
 


 #check-zfspart()
 #{
    # check the partition is up and type zfs 
     #sudo parted $PARTITION print -m | grep zfs
    
 #}

sudoers()
{
   #  Go passwordless for sudo this is a dev fortistacks DO NOT DO in Prod

    echo "$USER ALL=(ALL) NOPASSWD:ALL" |  sudo tee /etc/sudoers.d/99-nopasswd
}

install-packages()
{
    # install all the package/ppa sudo kernel setup .

    [ -f /etc/apt/sources.list.d/ubuntu-lxc-ubuntu-lxd-lts-xenial.list ] || sudo add-apt-repository -y ppa:ubuntu-lxc/lxd-lts
    [ -f /etc/apt/sources.list.d/juju-ubuntu-stable-xenial.list ]  || sudo add-apt-repository -y ppa:juju/stable
    sudo add-apt-repository cloud-archive:pike -y
    sudo apt update  || sudo apt upgrade
    sudo apt -y install zfsutils-linux lxd virt-manager openvswitch-switch-dpdk juju python-openstackclient python-novaclient \
	 python-glanceclient python-neutronclient ubuntu-desktop chromium-browser vino python-pip zile htop cgroup-tools charm-tools \
    cloud-utils  docker.io ||  exit 2
    sudo adduser $USER docker
    # Add docker and use to fortistacks and then use to deploy openbaton
    [ -f $HOME/.ssh/id_rsa ] ||  ssh-keygen  -t rsa -b 4096 -C "autogenerated key"  -q -P "" -f "$HOME/.ssh/id_rsa"
   
}

lxd-prod-configure()
{  
   #  # refer to https://github.com/lxc/lxd/blob/master/doc/production-setup.md
    sudo sed -i '/^root:/d' /etc/subuid /etc/subgid
    echo "root:500000:196608"  | sudo tee -a /etc/subgid /etc/subuid
    cat << EOF | sudo tee -a  /etc/security/limits.conf 
#Add    rules to allow LXD in production type of setups
*  soft  nofile  1048576 #  unset  maximum number of open files
*  hard  nofile  1048576  #unset  maximum number of open files
root  soft  nofile  1048576  #unset  maximum number of open files
root  hard  nofile  1048576  #unset  maximum number of open files
*  soft  memlock  unlimited  #unset  maximum locked-in-memory address space (KB)
*  hard  memlock  unlimited #unset  maximum locked-in-memory address space (KB)
EOF

cat << EOF  | sudo tee /etc/sysctl.d/90-lxd.conf 
#Add rules to allow LXD in production type of setups
fs.inotify.max_queued_events=1048576
fs.inotify.max_user_instances=1048576
fs.inotify.max_user_watches=1048576
vm.max_map_count=262144


net.core.netdev_max_backlog=182757

EOF
cat << EOF | sudo tee -a  /etc/sysctl.conf
fs.inotify.max_user_instances=1048576
fs.inotify.max_user_watches=1048576
EOF
sudo rm /usr/lib/sysctl.d/juju-2.0.conf
#To see what is going on
sudo sysctl --system

}

install()
{
    is-root
    install-packages
    bleach-lxd
    lxd-init
    lxd-prod-configure
    echo "You are all set it is highly recommended to restart now"
}


OPTS=$(getopt -o hdp: --long help,debug,partition: \
     -n 'fortistacks' -- "$@")




if [ $? != 0 ] ; then echo "Terminating..." >&2 ; exit 1 ; fi

# Note the quotes around `$OPTS': they are essential!
eval set -- "$OPTS"
MAIN=1
while true ; do
        case "$1" in
            -h|--help) usage ; exit 0 ;;
	    -d|--debug) set -x; shift ;;
            -p|--partition) PARTITION="$2" ; MAIN=0; shift 2 ;;
	    # code to collect multiple actions in a row if we want 
            --) shift ;  ACTIONS=$@; shift ;;
            *) echo "$# param left"; [ $# ] || shift && break ;;
	    # purge the list (shift)/break if zero
        esac
done

eval set -- "$ACTIONS"
while [ "$#" != 0 ] ; do
    $1 ; shift
done
