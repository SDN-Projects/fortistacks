tosca_definitions_version: cloudify_dsl_1_3

#descriptions and input must come from the including blueprint .

imports:
  - http://www.getcloudify.org/spec/cloudify/4.5.5/types.yaml
  - http://www.getcloudify.org/spec/openstack-plugin/2.14.7/plugin.yaml
    #- plugin:cloudify-openstack-plugin
  - plugin:cloudify-utilities-plugin



dsl_definitions:

# The configuration of openstack access is in the file /etc/cloudify/openstack_config.json
# For simplicity of blueprint reading.

#  ##openstack_config: &openstack_config
#    username: { get_secret: keystone_username }
#    password: { get_secret: keystone_password }
#    tenant_name: { get_secret: keystone_tenant_name }
#    auth_url: { get_secret: keystone_url }
#    region: { get_secret: region }

node_templates:

  dc_router:
    type: cloudify.openstack.nodes.Router
    properties:
      resource_id: dc-router
      external_network: { get_input: external_network_name }

  routes_wan:
    type: cloudify.openstack.nodes.Routes
    properties:
      routes:
        - destination: 10.20.20.0/24
          nexthop: 10.40.40.254
#      openstack_config: *openstack_config
    relationships:
      - target: dc_router
        type: cloudify.openstack.route_connected_to_router
      - target: wan_subnet
        type: cloudify.relationships.depends_on
      # you must have the subnet connected to router to allow route dest
      - target: netem
        type: cloudify.relationships.depends_on


    # networks
  provider_router:
    type: cloudify.openstack.nodes.Router
    properties:
      resource_id: provider-router
      use_external_resource: true

  wan_network:
    type: cloudify.openstack.nodes.Network
    properties:
      resource_id: wan_network

  isp_network:
    type: cloudify.openstack.nodes.Network
    properties:
      resource_id: isp_network


  wan_subnet:
    type: cloudify.openstack.nodes.Subnet
    properties:
      ##openstack_config: *openstack_config
      resource_id: wan_subnet
      subnet:
        host_routes: [ {"nexthop": "10.40.40.254", "destination": "10.20.20.0/24"} , {"nexthop": "10.40.40.1", "destination": "172.27.40.0/24"} ]
        allocation_pools:
          - start: 10.40.40.3
            end: 10.40.40.140
        dns_nameservers: [1.1.1.1]
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            args:
              cidr: 10.40.40.0/24
              ip_version: 4
              gateway_ip: 10.40.40.1
      cloudify.interfaces.validation:
        creation:
          inputs:
            args:
              cidr: 10.40.40.0/24
              ip_version: 4
              gateway_ip: 10.40.40.1
    relationships:
      - target: wan_network
        type: cloudify.relationships.contained_in
      - target: dc_router
        type: cloudify.openstack.subnet_connected_to_router

  isp_subnet:
    type: cloudify.openstack.nodes.Subnet
    properties:
      resource_id: isp_subnet
      subnet:
        host_routes: [ {"nexthop": "10.20.20.254", "destination": "10.40.40.0/24"}  ]
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            args:
              cidr: 10.20.20.0/24
              ip_version: 4
              gateway_ip: 10.20.20.1
      cloudify.interfaces.validation:
        creation:
          inputs:
            args:
              cidr: 10.20.20.0/24
              ip_version: 4
              gateway_ip: 10.20.20.1
    relationships:
      - target: isp_network
        type: cloudify.relationships.contained_in
      - target: provider_router
        type: cloudify.openstack.subnet_connected_to_router




  wan_port:
    type: cloudify.openstack.nodes.Port
    properties:
      resource_id: wan_port
      fixed_ip: "10.40.40.254"
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            args:
              port_security_enabled: False
    relationships:
      - target: wan_network
        type: cloudify.relationships.contained_in
      - target: wan_subnet
        type: cloudify.relationships.connected_to

  isp_port:
    type: cloudify.openstack.nodes.Port
    properties:
      resource_id: isp_port
      fixed_ip: "10.20.20.254"
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            args:
              port_security_enabled: False
    relationships:
      - target: isp_network
        type: cloudify.relationships.contained_in
      - target: isp_subnet
        type: cloudify.relationships.connected_to



#Wan emulation

  netem_host_cloud_config:
    type: cloudify.nodes.CloudInit.CloudConfig
    properties:
      resource_config:
        users:
        - name: { get_input: agent_user }
          groups: sudo
          shell: /bin/bash
          sudo: ['ALL=(ALL) NOPASSWD:ALL']
          passwd: 'fortinet'
          ssh-authorized-keys:
          - { get_secret: agent_key_public }
        packages:
          - [python-pip]
        write_files:
          - content: |
              # Enable dhcp on ens4
              auto ens4
              iface ens4 inet dhcp
            path: /etc/network/interfaces.d/51-ens4.cfg
          - content: |
              # Make it a router
              net.ipv4.ip_forward = 1
            path: /etc/sysctl.conf
          - content: |
              #!/bin/sh -e
              for nic in ens3 ens4
              do
               tc qdisc add dev $nic root netem delay 50ms 10ms distribution normal loss 0.15% 25% rate 712kbit
              done

              exit 0
            path: /etc/rc.local
            permissions: '0755'
        power_state:
          delay: "now"
          mode: reboot
          message: Rebooting to ensure network conf
          timeout: 10
          condition: True

  netem:
    type: cloudify.openstack.nodes.Server
    properties:
      server:
        image_name: { get_input: ub_image }
        flavor_name: { get_input: fos_flavor }
# Warning pushing a small flvor for that one only
        key_name: { get_input: key_name }
      agent_config:
        install_method: init_script
        user: { get_input: agent_user }
        port: 22
        key: { get_secret: agent_key_private }
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            args:
              userdata: { get_attribute: [ netem_host_cloud_config, cloud_config ] }
    relationships:
      - target: isp_port
        type: cloudify.relationships.connected_to
      - target: wan_port
        type: cloudify.relationships.connected_to
      - target: isp_port
        type: cloudify.relationships.depends_on
      - target: wan_subnet
        type: cloudify.relationships.depends_on
      - target: isp_subnet
        type: cloudify.relationships.depends_on

